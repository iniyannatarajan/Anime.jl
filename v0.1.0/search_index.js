var documenterSearchIndex = {"docs":
[{"location":"api/#Anime-API","page":"Anime API","title":"Anime API","text":"","category":"section"},{"location":"api/#Contents","page":"Anime API","title":"Contents","text":"","category":"section"},{"location":"api/","page":"Anime API","title":"Anime API","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api/#Index","page":"Anime API","title":"Index","text":"","category":"section"},{"location":"api/","page":"Anime API","title":"Anime API","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api/","page":"Anime API","title":"Anime API","text":"Modules = [Anime]","category":"page"},{"location":"api/#Anime.addcorruptions-Tuple{Anime.CjlObservation}","page":"Anime API","title":"Anime.addcorruptions","text":"addcorruptions(obs::CjlObservation)\n\nThis function is a wrapper that applies the instrument model to the source coherency.\n\n\n\n\n\n","category":"method"},{"location":"api/#Anime.bandpass-Tuple{Anime.CjlObservation}","page":"Anime API","title":"Anime.bandpass","text":"bandpass(obs::CjlObservation)\n\nThis function computes the bandpass model and applies it to the data. The actual numerical values are serialized.\n\n\n\n\n\n","category":"method"},{"location":"api/#Anime.elevationangle-Tuple{Anime.CjlObservation}","page":"Anime API","title":"Anime.elevationangle","text":"elevationangle(obs::CjlObservation)\n\nThis function computes the elevation angle for all stations for all times.\n\n\n\n\n\n","category":"method"},{"location":"api/#Anime.generatems-Tuple{String}","page":"Anime API","title":"Anime.generatems","text":"generatems(config::String; delim::String=\",\", ignorerepeated::Bool=false)\n\nThis calls the appropriate MS creation function based on the input parameters in the config file.\n\n\n\n\n\n","category":"method"},{"location":"api/#Anime.gentimeseries!-Tuple{Vector{ComplexF32}, String, ComplexF32, Float64, Float64, Int64, Random.AbstractRNG}","page":"Anime API","title":"Anime.gentimeseries!","text":"gentimeseries!(series::Vector{ComplexF32}, mode::String, location::ComplexF32, scale::Float64, driftrate::Float64, nsamples::Int64, rng::AbstractRNG)\n\nThis function generates a complex-valued Gaussian process time-series of length nsamples with the given location, scale, and driftrate parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#Anime.gentimeseries!-Tuple{Vector{Float32}, String, Float32, Float64, Float64, Int64, Random.AbstractRNG}","page":"Anime API","title":"Anime.gentimeseries!","text":"gentimeseries!(series::Vector{Float32}, mode::String, location::Float32, scale::Float64, driftrate::Float64, nsamples::Int64, rng::AbstractRNG)\n\nThis function generates a complex-valued Gaussian process time-series of length nsamples with the given location, scale, and driftrate parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#Anime.gentimeseries!-Tuple{Vector{Float64}, String, Float64, Float64, Float64, Int64, Random.AbstractRNG}","page":"Anime API","title":"Anime.gentimeseries!","text":"gentimeseries!(series::Vector{Float64}, mThis function generates a complex-valued Gaussian process time-series of length nsamples with the given location, scale, and driftrate parameters.ode::String, location::Float64, scale::Float64, driftrate::Float64, nsamples::Int64, rng::AbstractRNG)\n\nThis function generates a complex-valued Gaussian process time-series of length nsamples with the given location, scale, and driftrate parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#Anime.instrumentalpol-Tuple{Anime.CjlObservation}","page":"Anime API","title":"Anime.instrumentalpol","text":"instrumentalpol(obs::CjlObservation)\n\nThis function computes the instrumental polarization (leakage, or \"D-Jones\" terms) and applies it to the data. The actual numerical values are serialized.\n\n\n\n\n\n","category":"method"},{"location":"api/#Anime.loadobs-Tuple{String}","page":"Anime API","title":"Anime.loadobs","text":"loadobs(config::String; delim::String=\",\", ignorerepeated::Bool=false)\n\nThis loads data and metadata from ms and station table and returns a CjlObservation object.\n\n\n\n\n\n","category":"method"},{"location":"api/#Anime.parallacticangle-Tuple{Anime.CjlObservation}","page":"Anime API","title":"Anime.parallacticangle","text":"parallacticangle(obs::CjlObservation)\n\nThis function computes the parallactic angle for all stations for all times.\n\n\n\n\n\n","category":"method"},{"location":"api/#Anime.pointing-Tuple{Anime.CjlObservation}","page":"Anime API","title":"Anime.pointing","text":"pointing(obs::CjlObservation)\n\nThis function computes the pointing model and applies it to the data. The actual numerical values are serialized.\n\n\n\n\n\n","category":"method"},{"location":"api/#Anime.predict_visibilities-Tuple{String}","page":"Anime API","title":"Anime.predict_visibilities","text":"predict_visibilities(config::String)\n\nThis predicts the uncorrupted visibilities with the parameters obtained from config file.\n\n\n\n\n\n","category":"method"},{"location":"api/#Anime.stationgains-Tuple{Anime.CjlObservation}","page":"Anime API","title":"Anime.stationgains","text":"stationgains(obs::CjlObservation)\n\nThis function computes time-variable station gains and applies it to the data. The actual numerical values are serialized.\n\n\n\n\n\n","category":"method"},{"location":"api/#Anime.thermalnoise-Tuple{Anime.CjlObservation}","page":"Anime API","title":"Anime.thermalnoise","text":"thermalnoise(obs::CjlObservation)\n\nThis function computes the per-baseline thermal noise in the visibility domain and applies it to the data. The actual numerical values are serialized.\n\n\n\n\n\n","category":"method"},{"location":"api/#Anime.troposphere-Tuple{Anime.CjlObservation}","page":"Anime API","title":"Anime.troposphere","text":"troposphere(obs::CjlObservation)\n\nThis function computes various tropospheric effects and applies them to the data. The actual numerical values are serialized.\n\n\n\n\n\n","category":"method"},{"location":"install/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"install/#Pre-requisites","page":"Installation","title":"Pre-requisites","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Anime uses the python package casatools to handle the creation and manipulation of CASA Measurement Sets. You can install casatools using","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"pip install casatools","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"At the time of writing, casatools does not have a release candidate for python versions higher than 3.8. If this is not your default python environment, you may want to use pip in a python virtual environment or a conda environment that runs python 3.8 (since casatools does not have a conda installation candidate either).","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Install WSClean for predicting uncorrupted visibilities. On Ubuntu, this can be done via the Ubuntu package manager.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"note: Note\nThe use of WSClean will be deprecated soon as source coherency will be computed internally in Julia instead of relying on external packages.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Install AATM for computing certain atmospheric quantities that affect the observation, such as transmission, dry and wet path lengths, and sky temperature.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"note: Note\nThe use of AATM will be deprecated soon as more advance atmospheric modelling frameworks are integrated into Anime.","category":"page"},{"location":"install/#Installing-Anime","page":"Installation","title":"Installing Anime","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"If using conda, activate the appropriate environment and set the following environment variable in the shell before installing/using Anime","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"export JULIA_CONDAPKG_BACKEND=\"Null\"","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Anime can be installed using Julia's package manager. In the Julia REPL, type","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"import Pkg\nPkg.add(\"Anime\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Anime","category":"page"},{"location":"#Anime","page":"Home","title":"Anime","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Atmospheric aNd Instrumental models in the Measurement Equation - Anime - is an instrument modelling framework for radio interferometry written in Julia, an open source, high performance language for scientific computing. Anime aims to support efficient handling of various data formats commonly used in VLBI, provide seamless conversion between these formats and a variety of data products as output by a Very Long Baseline Interferometry (VLBI) array, and integrate with other Julia-based calibration and Bayesian VLBI imaging software packages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"index.md\",\n    \"install.md\",\n    \"execute.md\",\n    \"inputfiles.md\",\n    \"examples.md\",\n    \"api.md\"\n]","category":"page"}]
}
